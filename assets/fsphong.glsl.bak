#version 400

in vec3 Position;
in vec3 Normal;
in vec2 Texcoord;

out vec4 FragColor;

uniform vec3 LightPos;
uniform vec3 LightColor;

uniform vec3 EyePos;
uniform vec3 DiffuseColor;
uniform vec3 SpecularColor;
uniform vec3 AmbientColor;
uniform float SpecularExp;
uniform sampler2D DiffuseTexture;

// Aufgabe 2
const int MAX_LIGHTS=14;
struct Light
{
	int Type;
	vec3 Color;
	vec3 Position;
	vec3 Direction;
	vec3 Attenuation;
	vec3 SpotRadius;
	int ShadowIndex;
};

uniform Lights 
{
	int LightCount;
	Light lights[MAX_LIGHTS];
};

float sat(in float a){
    return clamp(a, 0.0, 1.0);
}

void calcCol(vec3 currentLight){
    vec4 DiffTex = texture(DiffuseTexture, Texcoord);
    if(DiffTex.a <0.3f) discard;
	
    vec3 N = normalize(Normal);
    vec3 L = normalize(currentLight.Position-Position);
    vec3 E = normalize(EyePos-Position);
    vec3 R = reflect(-L,N);
	
	vec3 H = normalize(E + L);
	
    vec3 DiffuseComponent = currentLight.Color * DiffuseColor * DiffTex.rgb * sat(dot(N,L));
    vec3 SpecularComponent = currentLight.Color * SpecularColor * pow(sat(dot(N, H)), SpecularExp); //dot(R,E)
	// P6 Aufgabe 1
	vec3 AmbientComponent = AmbientColor * DiffTex.rgb;
	
	FragColor.rgb = SpecularComponent + DiffuseComponent + AmbientComponent;
	FragColor.a = DiffTex.a;
	
    //FragColor = vec4((DiffuseComponent + AmbientColor) * DiffTex.rgb + SpecularComponent, DiffTex.a);
}

void main(){

	for(int i = 0; i < LightCount; i++)
		calcCol(lights[i]);
}
